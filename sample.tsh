#!/bin/bash

source bash_test_simple

# - - - - - - - - - - - - - - - - - - - - - - - - - 
# Step 1: Use any hooks, if desired. Good place
#         to set up and tear down tests, generate
#         reports.
# - - - - - - - - - - - - - - - - - - - - - - - - - 

when_suite_starts() {
  printf "(Optional hook: suite has started)\n\n"
}

when_suite_ends() {
  printf "(Optional hook: suite has finished)\n\n"
}

when_warns() {
  printf "(Optional hook: warning)\n"
}

when_test_starts() {
  printf "(Optional hook: test started)\n\n"
}

when_test_passes() {
  printf "(Optional hook: test passed)\n"
}

when_test_fails() {
  printf "(Optional hook: test failed)\n"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - 
# Step 2: Create the tests. Names are arbitrary
#         and need not start with test. However,
#         for your sake, you should be able to
#         differentiate tests from non-tests.
# - - - - - - - - - - - - - - - - - - - - - - - - - 

test_math() {
  warn "test $(( 1 + 1 )) -eq 2" 'Expecting 1 + 1 = 2'
  warn "test $(( 1 + 1 )) -eq 3" 'Expecting 1 + 1 = 3'
  warn "test $(( 100 % 3 )) -eq 2" 'Expecting 100 % 3 = 2'
  assert "test $(( 6 / 2 )) -eq 3" 'Expecting 6 / 2 = 3'
  assert "test $(( 6 / 2 )) -eq 2" 'Expecting 6 / 2 = 2'
  warn 'false' 'Test should have failed already'
}

test_strings() {
  warn "test abe = abe" 'Expecting abe = abe'
  warn "test abe = lincoln" 'Expecting abe = licoln'
  warn "test abe != lincoln" 'Expecting abe != lincoln'
  assert "test abe = abe" 'Expecting abe = abe'
  assert "test abe = lincoln" 'Expecting abe = licoln'
  assert "test abe != lincoln" 'Expecting abe != lincoln'
}

test_bash() {
  ls -l               # Can run commands...
  warn "ls -l"        # or warn if exit non-zero...
  assert "ls -l"      # or assert exit zero.
  pwd
  assert "pwd"
  assert "test $( pwd ) = $( pwd )" 'Expecting pwd to be consistent'
}

# - - - - - - - - - - - - - - - - - - - - - - - - - 
# Step 3: Arrange tests into suites. Each suite has
#         its own report, and resets counts (like
#         fails, passes, warnings)
# - - - - - - - - - - - - - - - - - - - - - - - - - 

suite 'My first test suite <3'
  run test_math
  run test_strings
end

suite 'My second test suite ^^'
  run test_bash
end

